@page "/"
@using FrontEnd.Models
@using FrontEnd.Services
@inject OrchestrationClient OrchestratorClient

<PageTitle>Orchestration Dashboard</PageTitle>

<h1>Orchestration Control Panel</h1>

<p>Monitor and control your distributed processing sessions in real-time.</p>

@if (statistics == null || sessions == null)
{
    <div class="text-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3"><em>Loading orchestration data...</em></p>
    </div>
}
else
{
    <!-- Statistics Overview -->
    <div class="row mb-4">
        <div class="col-12">
            <h3>System Overview</h3>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card bg-primary text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">
                        <i class="oi oi-layers"></i> Total Sessions
                    </h5>
                    <h2 class="mb-0">@statistics.TotalSessions</h2>
                    <small>@statistics.ActiveSessions active</small>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card bg-success text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">
                        <i class="oi oi-person"></i> Workers
                    </h5>
                    <h2 class="mb-0">@statistics.TotalWorkers</h2>
                    <small>@statistics.ActiveWorkers processing</small>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card bg-info text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">
                        <i class="oi oi-task"></i> Operations
                    </h5>
                    <h2 class="mb-0">@statistics.TotalOperations.ToString("N0")</h2>
                    <small>@statistics.SuccessRate.ToString("F1")% success rate</small>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card bg-warning text-dark h-100">
                <div class="card-body">
                    <h5 class="card-title">
                        <i class="oi oi-dashboard"></i> CPU Usage
                    </h5>
                    <h2 class="mb-0">@statistics.AverageCpuUsage.ToString("F1")%</h2>
                    <small>@FormatBytes(statistics.TotalMemoryUsage) memory</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Sessions List -->
    <div class="row">
        <div class="col-12">
            <h3>Active Sessions</h3>
        </div>
    </div>

    @if (sessions.Length == 0)
    {
        <div class="alert alert-info" role="alert">
            <i class="oi oi-info"></i> No sessions are currently running.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Session Name</th>
                        <th>Status</th>
                        <th>Workers</th>
                        <th>Operations</th>
                        <th>Success Rate</th>
                        <th>CPU Usage</th>
                        <th>Memory</th>
                        <th>Created</th>
                        <th>Last Active</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var session in sessions)
                    {
                        <tr>
                            <td>
                                <strong>@session.Name</strong>
                                <br />
                                <small class="text-muted">@session.Id</small>
                            </td>
                            <td>
                                <span class="badge @GetStatusBadgeClass(session.Status)">
                                    @session.Status
                                </span>
                            </td>
                            <td>
                                <span class="badge bg-secondary">@session.WorkerCount</span>
                            </td>
                            <td>
                                @session.Metrics.TotalOperations.ToString("N0")
                                <br />
                                <small class="text-success">✓ @session.Metrics.SuccessfulOperations</small>
                                <small class="text-danger">✗ @session.Metrics.FailedOperations</small>
                            </td>
                            <td>
                                @{
                                    var successRate = session.Metrics.TotalOperations > 0 
                                        ? (double)session.Metrics.SuccessfulOperations / session.Metrics.TotalOperations * 100 
                                        : 0;
                                }
                                <div class="progress" style="height: 20px;">
                                    <div class="progress-bar @GetProgressBarClass(successRate)" 
                                         role="progressbar" 
                                         style="width: @successRate.ToString("F0")%"
                                         aria-valuenow="@successRate" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                        @successRate.ToString("F1")%
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div class="progress" style="height: 20px;">
                                    <div class="progress-bar bg-info" 
                                         role="progressbar" 
                                         style="width: @session.Metrics.CpuUsage.ToString("F0")%"
                                         aria-valuenow="@session.Metrics.CpuUsage" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                        @session.Metrics.CpuUsage.ToString("F1")%
                                    </div>
                                </div>
                            </td>
                            <td>@FormatBytes(session.Metrics.MemoryUsage)</td>
                            <td>@session.CreatedAt.ToString("g")</td>
                            <td>@(session.LastActiveAt?.ToString("g") ?? "Never")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <!-- Auto-refresh indicator -->
    <div class="mt-3">
        <small class="text-muted">
            <i class="oi oi-loop-circular"></i> Auto-refreshing every 5 seconds...
        </small>
    </div>
}

@code {
    private Session[]? sessions;
    private SystemStatistics? statistics;
    private System.Threading.Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        
        // Set up auto-refresh
        refreshTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadData();
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5));
    }

    private async Task LoadData()
    {
        try
        {
            sessions = await OrchestratorClient.GetSessionsAsync();
            statistics = await OrchestratorClient.GetStatisticsAsync();
        }
        catch
        {
            sessions = Array.Empty<Session>();
            statistics = new SystemStatistics();
        }
    }

    private string GetStatusBadgeClass(SessionStatus status)
    {
        return status switch
        {
            SessionStatus.Active => "bg-success",
            SessionStatus.Paused => "bg-warning",
            SessionStatus.Completed => "bg-info",
            SessionStatus.Failed => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetProgressBarClass(double percentage)
    {
        return percentage switch
        {
            >= 95 => "bg-success",
            >= 80 => "bg-info",
            >= 60 => "bg-warning",
            _ => "bg-danger"
        };
    }

    private string FormatBytes(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}
