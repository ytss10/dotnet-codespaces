@page "/"
@using FrontEnd.Data
@inject WeatherForecastClient ForecastClient

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<div class="row mb-3">
    <div class="col-md-6">
        <div class="input-group">
            <label class="input-group-text" for="locationSelect">Select Location:</label>
            <select class="form-select" id="locationSelect" @onchange="OnLocationChanged">
                <option value="">All Locations</option>
                @if (locations != null)
                {
                    @foreach (var location in locations)
                    {
                        <option value="@location">@location</option>
                    }
                }
            </select>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="unitToggle" @onchange="ToggleTemperatureUnit" checked="@useFahrenheit">
            <label class="form-check-label" for="unitToggle">
                Show temperature in @(useFahrenheit ? "Fahrenheit" : "Celsius")
            </label>
        </div>
    </div>
</div>

@if (forecasts == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2"><em>Loading weather data...</em></p>
    </div>
}
else if (filteredForecasts.Length == 0)
{
    <div class="alert alert-info" role="alert">
        No weather data available for the selected location.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Date</th>
                    <th>Location</th>
                    <th>Temperature</th>
                    <th>Summary</th>
                    <th>Humidity</th>
                    <th>Wind Speed</th>
                    <th>Pressure</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in filteredForecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>
                            <span class="badge bg-primary">@forecast.Location</span>
                        </td>
                        <td>
                            <strong>
                                @if (useFahrenheit)
                                {
                                    @forecast.TemperatureF <text>°F</text>
                                }
                                else
                                {
                                    @forecast.TemperatureC <text>°C</text>
                                }
                            </strong>
                        </td>
                        <td>
                            <span class="badge @GetSummaryBadgeClass(forecast.Summary)">
                                @forecast.Summary
                            </span>
                        </td>
                        <td>@forecast.HumidityPercent</td>
                        <td>@forecast.WindSpeedMph</td>
                        <td>@forecast.PressureMb</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    
    <div class="mt-3">
        <h4>Weather Statistics</h4>
        <div class="row">
            <div class="col-md-3">
                <div class="card text-white bg-info mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Average Temp</h5>
                        <p class="card-text">
                            @if (useFahrenheit)
                            {
                                <text>@GetAverageTemperature(true)°F</text>
                            }
                            else
                            {
                                <text>@GetAverageTemperature(false)°C</text>
                            }
                        </p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-white bg-success mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Max Temp</h5>
                        <p class="card-text">
                            @if (useFahrenheit)
                            {
                                <text>@GetMaxTemperature(true)°F</text>
                            }
                            else
                            {
                                <text>@GetMaxTemperature(false)°C</text>
                            }
                        </p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-white bg-warning mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Min Temp</h5>
                        <p class="card-text">
                            @if (useFahrenheit)
                            {
                                <text>@GetMinTemperature(true)°F</text>
                            }
                            else
                            {
                                <text>@GetMinTemperature(false)°C</text>
                            }
                        </p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-white bg-secondary mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Locations</h5>
                        <p class="card-text">@filteredForecasts.Select(f => f.Location).Distinct().Count()</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast[] filteredForecasts = Array.Empty<WeatherForecast>();
    private string[]? locations;
    private string selectedLocation = "";
    private bool useFahrenheit = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            forecasts = await ForecastClient.GetForecastAsync(DateTime.Now);
            locations = await ForecastClient.GetLocationsAsync();
            UpdateFilteredForecasts();
        }
        catch
        {
            // Log error - in production, log to appropriate logging service
            forecasts = Array.Empty<WeatherForecast>();
        }
    }

    private void OnLocationChanged(ChangeEventArgs e)
    {
        selectedLocation = e.Value?.ToString() ?? "";
        UpdateFilteredForecasts();
    }

    private void ToggleTemperatureUnit(ChangeEventArgs e)
    {
        useFahrenheit = !useFahrenheit;
    }

    private void UpdateFilteredForecasts()
    {
        if (forecasts == null)
        {
            filteredForecasts = Array.Empty<WeatherForecast>();
            return;
        }

        if (string.IsNullOrEmpty(selectedLocation))
        {
            filteredForecasts = forecasts;
        }
        else
        {
            filteredForecasts = forecasts.Where(f => f.Location == selectedLocation).ToArray();
        }
    }

    private string GetSummaryBadgeClass(string? summary)
    {
        return summary switch
        {
            "Freezing" or "Bracing" => "bg-primary",
            "Chilly" or "Cool" => "bg-info",
            "Mild" or "Warm" => "bg-success",
            "Balmy" or "Hot" => "bg-warning",
            "Sweltering" or "Scorching" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private int GetAverageTemperature(bool fahrenheit)
    {
        if (filteredForecasts.Length == 0) return 0;
        return fahrenheit 
            ? (int)filteredForecasts.Average(f => f.TemperatureF)
            : (int)filteredForecasts.Average(f => f.TemperatureC);
    }

    private int GetMaxTemperature(bool fahrenheit)
    {
        if (filteredForecasts.Length == 0) return 0;
        return fahrenheit 
            ? filteredForecasts.Max(f => f.TemperatureF)
            : filteredForecasts.Max(f => f.TemperatureC);
    }

    private int GetMinTemperature(bool fahrenheit)
    {
        if (filteredForecasts.Length == 0) return 0;
        return fahrenheit 
            ? filteredForecasts.Min(f => f.TemperatureF)
            : filteredForecasts.Min(f => f.TemperatureC);
    }
}
